// Code generated by mockery v2.40.1. DO NOT EDIT.

package opa_client

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// MockClienter is an autogenerated mock type for the Clienter type
type MockClienter struct {
	mock.Mock
}

type MockClienter_Expecter struct {
	mock *mock.Mock
}

func (_m *MockClienter) EXPECT() *MockClienter_Expecter {
	return &MockClienter_Expecter{mock: &_m.Mock}
}

// Address provides a mock function with given fields:
func (_m *MockClienter) Address() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Address")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// MockClienter_Address_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Address'
type MockClienter_Address_Call struct {
	*mock.Call
}

// Address is a helper method to define mock.On call
func (_e *MockClienter_Expecter) Address() *MockClienter_Address_Call {
	return &MockClienter_Address_Call{Call: _e.mock.On("Address")}
}

func (_c *MockClienter_Address_Call) Run(run func()) *MockClienter_Address_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockClienter_Address_Call) Return(_a0 string) *MockClienter_Address_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockClienter_Address_Call) RunAndReturn(run func() string) *MockClienter_Address_Call {
	_c.Call.Return(run)
	return _c
}

// CustomQuery provides a mock function with given fields: ctx, document, reqData, resp
func (_m *MockClienter) CustomQuery(ctx context.Context, document string, reqData interface{}, resp interface{}) error {
	ret := _m.Called(ctx, document, reqData, resp)

	if len(ret) == 0 {
		panic("no return value specified for CustomQuery")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, interface{}, interface{}) error); ok {
		r0 = rf(ctx, document, reqData, resp)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockClienter_CustomQuery_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CustomQuery'
type MockClienter_CustomQuery_Call struct {
	*mock.Call
}

// CustomQuery is a helper method to define mock.On call
//   - ctx context.Context
//   - document string
//   - reqData interface{}
//   - resp interface{}
func (_e *MockClienter_Expecter) CustomQuery(ctx interface{}, document interface{}, reqData interface{}, resp interface{}) *MockClienter_CustomQuery_Call {
	return &MockClienter_CustomQuery_Call{Call: _e.mock.On("CustomQuery", ctx, document, reqData, resp)}
}

func (_c *MockClienter_CustomQuery_Call) Run(run func(ctx context.Context, document string, reqData interface{}, resp interface{})) *MockClienter_CustomQuery_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(interface{}), args[3].(interface{}))
	})
	return _c
}

func (_c *MockClienter_CustomQuery_Call) Return(_a0 error) *MockClienter_CustomQuery_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockClienter_CustomQuery_Call) RunAndReturn(run func(context.Context, string, interface{}, interface{}) error) *MockClienter_CustomQuery_Call {
	_c.Call.Return(run)
	return _c
}

// CustomQueryBytes provides a mock function with given fields: ctx, document, reqData
func (_m *MockClienter) CustomQueryBytes(ctx context.Context, document string, reqData interface{}) ([]byte, error) {
	ret := _m.Called(ctx, document, reqData)

	if len(ret) == 0 {
		panic("no return value specified for CustomQueryBytes")
	}

	var r0 []byte
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, interface{}) ([]byte, error)); ok {
		return rf(ctx, document, reqData)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, interface{}) []byte); ok {
		r0 = rf(ctx, document, reqData)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, interface{}) error); ok {
		r1 = rf(ctx, document, reqData)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClienter_CustomQueryBytes_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CustomQueryBytes'
type MockClienter_CustomQueryBytes_Call struct {
	*mock.Call
}

// CustomQueryBytes is a helper method to define mock.On call
//   - ctx context.Context
//   - document string
//   - reqData interface{}
func (_e *MockClienter_Expecter) CustomQueryBytes(ctx interface{}, document interface{}, reqData interface{}) *MockClienter_CustomQueryBytes_Call {
	return &MockClienter_CustomQueryBytes_Call{Call: _e.mock.On("CustomQueryBytes", ctx, document, reqData)}
}

func (_c *MockClienter_CustomQueryBytes_Call) Run(run func(ctx context.Context, document string, reqData interface{})) *MockClienter_CustomQueryBytes_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(interface{}))
	})
	return _c
}

func (_c *MockClienter_CustomQueryBytes_Call) Return(_a0 []byte, _a1 error) *MockClienter_CustomQueryBytes_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClienter_CustomQueryBytes_Call) RunAndReturn(run func(context.Context, string, interface{}) ([]byte, error)) *MockClienter_CustomQueryBytes_Call {
	_c.Call.Return(run)
	return _c
}

// CustomQueryStream provides a mock function with given fields: ctx, document, postReqBody, respRdrFn
func (_m *MockClienter) CustomQueryStream(ctx context.Context, document string, postReqBody []byte, respRdrFn StreamReaderFn) error {
	ret := _m.Called(ctx, document, postReqBody, respRdrFn)

	if len(ret) == 0 {
		panic("no return value specified for CustomQueryStream")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, []byte, StreamReaderFn) error); ok {
		r0 = rf(ctx, document, postReqBody, respRdrFn)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockClienter_CustomQueryStream_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CustomQueryStream'
type MockClienter_CustomQueryStream_Call struct {
	*mock.Call
}

// CustomQueryStream is a helper method to define mock.On call
//   - ctx context.Context
//   - document string
//   - postReqBody []byte
//   - respRdrFn StreamReaderFn
func (_e *MockClienter_Expecter) CustomQueryStream(ctx interface{}, document interface{}, postReqBody interface{}, respRdrFn interface{}) *MockClienter_CustomQueryStream_Call {
	return &MockClienter_CustomQueryStream_Call{Call: _e.mock.On("CustomQueryStream", ctx, document, postReqBody, respRdrFn)}
}

func (_c *MockClienter_CustomQueryStream_Call) Run(run func(ctx context.Context, document string, postReqBody []byte, respRdrFn StreamReaderFn)) *MockClienter_CustomQueryStream_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].([]byte), args[3].(StreamReaderFn))
	})
	return _c
}

func (_c *MockClienter_CustomQueryStream_Call) Return(_a0 error) *MockClienter_CustomQueryStream_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockClienter_CustomQueryStream_Call) RunAndReturn(run func(context.Context, string, []byte, StreamReaderFn) error) *MockClienter_CustomQueryStream_Call {
	_c.Call.Return(run)
	return _c
}

// Health provides a mock function with given fields:
func (_m *MockClienter) Health() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Health")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockClienter_Health_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Health'
type MockClienter_Health_Call struct {
	*mock.Call
}

// Health is a helper method to define mock.On call
func (_e *MockClienter_Expecter) Health() *MockClienter_Health_Call {
	return &MockClienter_Health_Call{Call: _e.mock.On("Health")}
}

func (_c *MockClienter_Health_Call) Run(run func()) *MockClienter_Health_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockClienter_Health_Call) Return(_a0 error) *MockClienter_Health_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockClienter_Health_Call) RunAndReturn(run func() error) *MockClienter_Health_Call {
	_c.Call.Return(run)
	return _c
}

// Query provides a mock function with given fields: ctx, reqData, resp
func (_m *MockClienter) Query(ctx context.Context, reqData interface{}, resp interface{}) error {
	ret := _m.Called(ctx, reqData, resp)

	if len(ret) == 0 {
		panic("no return value specified for Query")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, interface{}, interface{}) error); ok {
		r0 = rf(ctx, reqData, resp)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockClienter_Query_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Query'
type MockClienter_Query_Call struct {
	*mock.Call
}

// Query is a helper method to define mock.On call
//   - ctx context.Context
//   - reqData interface{}
//   - resp interface{}
func (_e *MockClienter_Expecter) Query(ctx interface{}, reqData interface{}, resp interface{}) *MockClienter_Query_Call {
	return &MockClienter_Query_Call{Call: _e.mock.On("Query", ctx, reqData, resp)}
}

func (_c *MockClienter_Query_Call) Run(run func(ctx context.Context, reqData interface{}, resp interface{})) *MockClienter_Query_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(interface{}), args[2].(interface{}))
	})
	return _c
}

func (_c *MockClienter_Query_Call) Return(_a0 error) *MockClienter_Query_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockClienter_Query_Call) RunAndReturn(run func(context.Context, interface{}, interface{}) error) *MockClienter_Query_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockClienter creates a new instance of MockClienter. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockClienter(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockClienter {
	mock := &MockClienter{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
