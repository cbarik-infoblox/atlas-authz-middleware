// Code generated by mockery v2.40.1. DO NOT EDIT.

package grpc_opa_middleware

import (
	context "context"

	authorizer "github.com/infobloxopen/atlas-authz-middleware/v2/common/authorizer"

	mock "github.com/stretchr/testify/mock"
)

// MockAuthorizeFn is an autogenerated mock type for the AuthorizeFn type
type MockAuthorizeFn struct {
	mock.Mock
}

type MockAuthorizeFn_Expecter struct {
	mock *mock.Mock
}

func (_m *MockAuthorizeFn) EXPECT() *MockAuthorizeFn_Expecter {
	return &MockAuthorizeFn_Expecter{mock: &_m.Mock}
}

// Execute provides a mock function with given fields: ctx, fullMethodName, grpcReq, opaEvaluator
func (_m *MockAuthorizeFn) Execute(ctx context.Context, fullMethodName string, grpcReq interface{}, opaEvaluator authorizer.OpaEvaluator) (bool, context.Context, error) {
	ret := _m.Called(ctx, fullMethodName, grpcReq, opaEvaluator)

	if len(ret) == 0 {
		panic("no return value specified for Execute")
	}

	var r0 bool
	var r1 context.Context
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, string, interface{}, authorizer.OpaEvaluator) (bool, context.Context, error)); ok {
		return rf(ctx, fullMethodName, grpcReq, opaEvaluator)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, interface{}, authorizer.OpaEvaluator) bool); ok {
		r0 = rf(ctx, fullMethodName, grpcReq, opaEvaluator)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, interface{}, authorizer.OpaEvaluator) context.Context); ok {
		r1 = rf(ctx, fullMethodName, grpcReq, opaEvaluator)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(context.Context)
		}
	}

	if rf, ok := ret.Get(2).(func(context.Context, string, interface{}, authorizer.OpaEvaluator) error); ok {
		r2 = rf(ctx, fullMethodName, grpcReq, opaEvaluator)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MockAuthorizeFn_Execute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Execute'
type MockAuthorizeFn_Execute_Call struct {
	*mock.Call
}

// Execute is a helper method to define mock.On call
//   - ctx context.Context
//   - fullMethodName string
//   - grpcReq interface{}
//   - opaEvaluator authorizer.OpaEvaluator
func (_e *MockAuthorizeFn_Expecter) Execute(ctx interface{}, fullMethodName interface{}, grpcReq interface{}, opaEvaluator interface{}) *MockAuthorizeFn_Execute_Call {
	return &MockAuthorizeFn_Execute_Call{Call: _e.mock.On("Execute", ctx, fullMethodName, grpcReq, opaEvaluator)}
}

func (_c *MockAuthorizeFn_Execute_Call) Run(run func(ctx context.Context, fullMethodName string, grpcReq interface{}, opaEvaluator authorizer.OpaEvaluator)) *MockAuthorizeFn_Execute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(interface{}), args[3].(authorizer.OpaEvaluator))
	})
	return _c
}

func (_c *MockAuthorizeFn_Execute_Call) Return(_a0 bool, _a1 context.Context, _a2 error) *MockAuthorizeFn_Execute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *MockAuthorizeFn_Execute_Call) RunAndReturn(run func(context.Context, string, interface{}, authorizer.OpaEvaluator) (bool, context.Context, error)) *MockAuthorizeFn_Execute_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockAuthorizeFn creates a new instance of MockAuthorizeFn. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockAuthorizeFn(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockAuthorizeFn {
	mock := &MockAuthorizeFn{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
